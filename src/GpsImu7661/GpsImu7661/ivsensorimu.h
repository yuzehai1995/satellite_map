// Generated by gencpp from file GpsImu7661/ivsensorimu.msg
// DO NOT EDIT!


#ifndef GPSIMU7661_MESSAGE_IVSENSORIMU_H
#define GPSIMU7661_MESSAGE_IVSENSORIMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace GpsImu7661
{
template <class ContainerAllocator>
struct ivsensorimu_
{
  typedef ivsensorimu_<ContainerAllocator> Type;

  ivsensorimu_()
    : angx(0.0)
    , angy(0.0)
    , angz(0.0)
    , accx(0.0)
    , accy(0.0)
    , accz(0.0)
    , msgflag()  {
    }
  ivsensorimu_(const ContainerAllocator& _alloc)
    : angx(0.0)
    , angy(0.0)
    , angz(0.0)
    , accx(0.0)
    , accy(0.0)
    , accz(0.0)
    , msgflag(_alloc)  {
  (void)_alloc;
    }



   typedef double _angx_type;
  _angx_type angx;

   typedef double _angy_type;
  _angy_type angy;

   typedef double _angz_type;
  _angz_type angz;

   typedef double _accx_type;
  _accx_type accx;

   typedef double _accy_type;
  _accy_type accy;

   typedef double _accz_type;
  _accz_type accz;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msgflag_type;
  _msgflag_type msgflag;





  typedef boost::shared_ptr< ::GpsImu7661::ivsensorimu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::GpsImu7661::ivsensorimu_<ContainerAllocator> const> ConstPtr;

}; // struct ivsensorimu_

typedef ::GpsImu7661::ivsensorimu_<std::allocator<void> > ivsensorimu;

typedef boost::shared_ptr< ::GpsImu7661::ivsensorimu > ivsensorimuPtr;
typedef boost::shared_ptr< ::GpsImu7661::ivsensorimu const> ivsensorimuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::GpsImu7661::ivsensorimu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace GpsImu7661

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'GpsImu7661': ['/home/xfy/MyComputer/Velodyne/catkin_velodyne_1604_05028_GPS/src/GpsImu7661/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::GpsImu7661::ivsensorimu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::GpsImu7661::ivsensorimu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::GpsImu7661::ivsensorimu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5fab5cdc6368eb6583592520feb517e";
  }

  static const char* value(const ::GpsImu7661::ivsensorimu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5fab5cdc6368eb6ULL;
  static const uint64_t static_value2 = 0x583592520feb517eULL;
};

template<class ContainerAllocator>
struct DataType< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GpsImu7661/ivsensorimu";
  }

  static const char* value(const ::GpsImu7661::ivsensorimu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 angx\n\
float64 angy\n\
float64 angz\n\
float64 accx\n\
float64 accy\n\
float64 accz\n\
string msgflag\n\
";
  }

  static const char* value(const ::GpsImu7661::ivsensorimu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angx);
      stream.next(m.angy);
      stream.next(m.angz);
      stream.next(m.accx);
      stream.next(m.accy);
      stream.next(m.accz);
      stream.next(m.msgflag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ivsensorimu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::GpsImu7661::ivsensorimu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::GpsImu7661::ivsensorimu_<ContainerAllocator>& v)
  {
    s << indent << "angx: ";
    Printer<double>::stream(s, indent + "  ", v.angx);
    s << indent << "angy: ";
    Printer<double>::stream(s, indent + "  ", v.angy);
    s << indent << "angz: ";
    Printer<double>::stream(s, indent + "  ", v.angz);
    s << indent << "accx: ";
    Printer<double>::stream(s, indent + "  ", v.accx);
    s << indent << "accy: ";
    Printer<double>::stream(s, indent + "  ", v.accy);
    s << indent << "accz: ";
    Printer<double>::stream(s, indent + "  ", v.accz);
    s << indent << "msgflag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msgflag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPSIMU7661_MESSAGE_IVSENSORIMU_H
